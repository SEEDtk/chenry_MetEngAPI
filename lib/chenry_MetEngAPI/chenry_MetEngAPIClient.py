# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class chenry_MetEngAPI(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def get_gene_table_from_model(self, params, context=None):
        """
        Retrieve master gene table
        :param params: instance of type "ModelOnlyInput" -> structure:
           parameter "workspace" of String, parameter "model" of String
        :returns: instance of type "GeneTable" -> structure: parameter
           "headings" of list of String, parameter "data" of list of list of
           String
        """
        return self._client.call_method('chenry_MetEngAPI.get_gene_table_from_model',
                                        [params], self._service_ver, context)

    def get_model_data(self, params, context=None):
        """
        Retrieve model data
        :param params: instance of type "ModelOnlyInput" -> structure:
           parameter "workspace" of String, parameter "model" of String
        :returns: instance of type "GeneTable" -> structure: parameter
           "headings" of list of String, parameter "data" of list of list of
           String
        """
        return self._client.call_method('chenry_MetEngAPI.get_model_data',
                                        [params], self._service_ver, context)

    def compute_biosynthesis_pathway(self, params, context=None):
        """
        Compute the peripheral biosynthesis pathway for the selected target
        :param params: instance of type "ModelInput" -> structure: parameter
           "workspace" of String, parameter "model" of String, parameter
           "carbon_source" of String, parameter "target" of String, parameter
           "base_media" of String, parameter "media_workspace" of String,
           parameter "kos" of list of String, parameter "kds" of mapping from
           String to Double, parameter "inductions" of mapping from String to
           Double, parameter "cofactor_stoichiometry" of mapping from String
           to Double
        :returns: instance of type "PathwayReactions" -> structure: parameter
           "pathway_reactions" of list of type "PathwayReaction" ->
           structure: parameter "id" of String, parameter "intermediate" of
           Long, parameter "flux" of Double, parameter "max_flux" of Double,
           parameter "min_flux" of Double, parameter "ATP_cost" of Double,
           parameter "cofactor_stoichiometry" of mapping from String to Double
        """
        return self._client.call_method('chenry_MetEngAPI.compute_biosynthesis_pathway',
                                        [params], self._service_ver, context)

    def compute_competing_pathways(self, params, context=None):
        """
        Compute the peripheral biosynthesis pathway for the selected target
        :param params: instance of type "ModelInput" -> structure: parameter
           "workspace" of String, parameter "model" of String, parameter
           "carbon_source" of String, parameter "target" of String, parameter
           "base_media" of String, parameter "media_workspace" of String,
           parameter "kos" of list of String, parameter "kds" of mapping from
           String to Double, parameter "inductions" of mapping from String to
           Double, parameter "cofactor_stoichiometry" of mapping from String
           to Double
        :returns: instance of type "CompetingReactions" -> structure:
           parameter "competing_reactions" of mapping from String to type
           "CompetingReactionData" -> structure: parameter "id" of String,
           parameter "direction_for_competition" of String, parameter
           "intermediate" of Long, parameter "flux" of Double, parameter
           "max_flux" of Double, parameter "min_flux" of Double
        """
        return self._client.call_method('chenry_MetEngAPI.compute_competing_pathways',
                                        [params], self._service_ver, context)

    def compute_cofactor_consuming_pathways(self, params, context=None):
        """
        Compute the peripheral biosynthesis pathway for the selected target
        :param params: instance of type "ModelInput" -> structure: parameter
           "workspace" of String, parameter "model" of String, parameter
           "carbon_source" of String, parameter "target" of String, parameter
           "base_media" of String, parameter "media_workspace" of String,
           parameter "kos" of list of String, parameter "kds" of mapping from
           String to Double, parameter "inductions" of mapping from String to
           Double, parameter "cofactor_stoichiometry" of mapping from String
           to Double
        :returns: instance of type "CofactorReactions" -> structure:
           parameter "cofactor_reactions" of mapping from String to type
           "CofactorReactionData" -> structure: parameter "id" of String,
           parameter "direction_for_competition" of String, parameter "flux"
           of Double, parameter "max_flux" of Double, parameter "min_flux" of
           Double
        """
        return self._client.call_method('chenry_MetEngAPI.compute_cofactor_consuming_pathways',
                                        [params], self._service_ver, context)

    def systematic_target_search(self, params, context=None):
        """
        Systematically try all KO and return predicted production from each KO
        :param params: instance of type "ModelInput" -> structure: parameter
           "workspace" of String, parameter "model" of String, parameter
           "carbon_source" of String, parameter "target" of String, parameter
           "base_media" of String, parameter "media_workspace" of String,
           parameter "kos" of list of String, parameter "kds" of mapping from
           String to Double, parameter "inductions" of mapping from String to
           Double, parameter "cofactor_stoichiometry" of mapping from String
           to Double
        :returns: instance of type "TargetModifications" -> structure:
           parameter "ko_targets" of list of tuple of size 2: String, Double,
           parameter "induction_targets" of list of tuple of size 2: String,
           Double
        """
        return self._client.call_method('chenry_MetEngAPI.systematic_target_search',
                                        [params], self._service_ver, context)

    def compute_flux(self, params, context=None):
        """
        Compute the peripheral biosynthesis pathway for the selected target
        :param params: instance of type "ModelInput" -> structure: parameter
           "workspace" of String, parameter "model" of String, parameter
           "carbon_source" of String, parameter "target" of String, parameter
           "base_media" of String, parameter "media_workspace" of String,
           parameter "kos" of list of String, parameter "kds" of mapping from
           String to Double, parameter "inductions" of mapping from String to
           Double, parameter "cofactor_stoichiometry" of mapping from String
           to Double
        :returns: instance of type "FluxData" -> structure: parameter
           "reaction_fluxes" of mapping from String to Double, parameter
           "metabolite_flux" of mapping from String to Double
        """
        return self._client.call_method('chenry_MetEngAPI.compute_flux',
                                        [params], self._service_ver, context)

    def list_maps(self, MapInput, context=None):
        """
        List maps available for viewing
        :param MapInput: instance of type "MapInput" -> structure: parameter
           "model" of String
        :returns: instance of type "MapList" -> structure: parameter "maps"
           of list of type "MapData" -> structure: parameter "id" of String,
           parameter "name" of String, parameter "reactions" of list of
           String, parameter "compounds" of list of String, parameter "genes"
           of list of String, parameter "total_reactions" of Long, parameter
           "total_compounds" of Long
        """
        return self._client.call_method('chenry_MetEngAPI.list_maps',
                                        [MapInput], self._service_ver, context)

    def get_map(self, params, context=None):
        """
        Get an escher map painted with input data rendered in HTML format
        :param params: instance of type "EscherInput" -> structure: parameter
           "map_id" of String, parameter "reaction_flux" of mapping from
           String to Double, parameter "gene_expression" of mapping from
           String to Double, parameter "metabolite_values" of mapping from
           String to Double, parameter "model" of String, parameter "target"
           of String, parameter "kos" of list of String, parameter "kds" of
           list of String, parameter "inductions" of list of String
        :returns: instance of type "EscherOutput" -> structure: parameter
           "html" of String
        """
        return self._client.call_method('chenry_MetEngAPI.get_map',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('chenry_MetEngAPI.status',
                                        [], self._service_ver, context)
